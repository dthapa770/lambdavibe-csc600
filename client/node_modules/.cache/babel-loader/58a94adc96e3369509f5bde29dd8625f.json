{"ast":null,"code":"var _jsxFileName = \"/Users/d.t./Desktop/LambdaVibe/client/src/instruments/dthapa770.tsx\";\n// 3rd party library imports\nimport * as Tone from \"tone\";\nimport classNames from \"classnames\";\nimport { List } from \"immutable\";\nimport React from \"react\";\n// project imports\nimport { Instrument } from \"../Instruments\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction DrumType({\n  title,\n  onClick,\n  active\n}) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onClick: onClick,\n    className: classNames(\"dim pointer ph2 pv1 ba mr2 br1 fw7 bw1\", {\n      \"b--black black\": active,\n      \"gray b--light-gray\": !active\n    }),\n    children: title\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 5\n  }, this);\n}\n\n_c = DrumType;\n\nfunction Drum({\n  synth,\n  setSynth\n}) {\n  const keys = List([{\n    note: \"C\",\n    idx: 0\n  }, {\n    note: \"Db\",\n    idx: 0.5\n  }, {\n    note: \"D\",\n    idx: 1\n  }, {\n    note: \"Eb\",\n    idx: 1.5\n  }, {\n    note: \"E\",\n    idx: 2\n  }, {\n    note: \"F\",\n    idx: 3\n  }, {\n    note: \"Gb\",\n    idx: 3.5\n  }, {\n    note: \"G\",\n    idx: 4\n  }, {\n    note: \"Ab\",\n    idx: 4.5\n  }, {\n    note: \"A\",\n    idx: 5\n  }, {\n    note: \"Bb\",\n    idx: 5.5\n  }, {\n    note: \"B\",\n    idx: 6\n  }]);\n\n  const setOscillator = newType => {\n    setSynth(oldSynth => {\n      oldSynth.disconnect();\n      return new Tone.Synth({\n        oscillator: {\n          type: newType\n        }\n      }).toDestination();\n    });\n  };\n\n  const oscillators = List([\"sine\", \"sawtooth\", \"square\", \"triangle\", \"fmsine\", \"fmsawtooth\", \"fmtriangle\", \"amsine\", \"amsawtooth\", \"amtriangle\"]);\n\n  const playSound = (evt, octave) => {\n    let notes = [\"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\"];\n    let elem = evt.target;\n    let rect = elem.getBoundingClientRect();\n    let middlePoint = [rect.x + rect.width / 2, rect.y + rect.height / 2];\n    let clickPos = [evt.clientX, evt.clientY];\n    let y = clickPos[0] - middlePoint[0];\n    let x = clickPos[1] - middlePoint[1];\n    let dist = Math.sqrt(x * x + y * y);\n    let maxDist = rect.height / 2;\n    let relDist = dist / maxDist;\n    let idx = Math.floor(notes.length * relDist);\n    let note = notes[idx];\n    synth === null || synth === void 0 ? void 0 : synth.triggerAttackRelease(`${note}${octave}`, \"0.2\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"pv4\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"drums\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"firstDrum\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"innerDrum\",\n          onClick: evt => playSound(evt, 3)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"secondDrum\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"innerDrum\",\n          onClick: evt => playSound(evt, 2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"thirdDrum\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"innerDrum\",\n          onClick: evt => playSound(evt, 4)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pl4 pt4 flex\",\n      children: oscillators.map(o => /*#__PURE__*/_jsxDEV(DrumType, {\n        title: o,\n        onClick: () => setOscillator(o),\n        active: (synth === null || synth === void 0 ? void 0 : synth.oscillator.type) === o\n      }, o, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n}\n\n_c2 = Drum;\nexport const DrumInstrument = new Instrument(\"Drums\", Drum);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"DrumType\");\n$RefreshReg$(_c2, \"Drum\");","map":{"version":3,"sources":["/Users/d.t./Desktop/LambdaVibe/client/src/instruments/dthapa770.tsx"],"names":["Tone","classNames","List","React","Instrument","DrumType","title","onClick","active","Drum","synth","setSynth","keys","note","idx","setOscillator","newType","oldSynth","disconnect","Synth","oscillator","type","toDestination","oscillators","playSound","evt","octave","notes","elem","target","rect","getBoundingClientRect","middlePoint","x","width","y","height","clickPos","clientX","clientY","dist","Math","sqrt","maxDist","relDist","floor","length","triggerAttackRelease","map","o","DrumInstrument"],"mappings":"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","sourcesContent":["// 3rd party library imports\nimport * as Tone from \"tone\";\nimport classNames from \"classnames\";\nimport { List, Range } from \"immutable\";\nimport React from \"react\";\nimport { MouseEvent } from \"react\";\n\n// project imports\nimport { Instrument, InstrumentProps } from \"../Instruments\";\n\nfunction DrumType({ title, onClick, active }: any): JSX.Element {\n  return (\n    <div\n      onClick={onClick}\n      className={classNames(\"dim pointer ph2 pv1 ba mr2 br1 fw7 bw1\", {\n        \"b--black black\": active,\n        \"gray b--light-gray\": !active,\n      })}\n    >\n      {title}\n    </div>\n  );\n}\n\nfunction Drum({ synth, setSynth }: InstrumentProps): JSX.Element {\n  const keys = List([\n    { note: \"C\", idx: 0 },\n    { note: \"Db\", idx: 0.5 },\n    { note: \"D\", idx: 1 },\n    { note: \"Eb\", idx: 1.5 },\n    { note: \"E\", idx: 2 },\n    { note: \"F\", idx: 3 },\n    { note: \"Gb\", idx: 3.5 },\n    { note: \"G\", idx: 4 },\n    { note: \"Ab\", idx: 4.5 },\n    { note: \"A\", idx: 5 },\n    { note: \"Bb\", idx: 5.5 },\n    { note: \"B\", idx: 6 },\n  ]);\n\n  const setOscillator = (newType: Tone.ToneOscillatorType) => {\n    setSynth((oldSynth) => {\n      oldSynth.disconnect();\n\n      return new Tone.Synth({\n        oscillator: { type: newType } as Tone.OmniOscillatorOptions,\n      }).toDestination();\n    });\n  };\n\n  const oscillators: List<OscillatorType> = List([\n    \"sine\",\n    \"sawtooth\",\n    \"square\",\n    \"triangle\",\n    \"fmsine\",\n    \"fmsawtooth\",\n    \"fmtriangle\",\n    \"amsine\",\n    \"amsawtooth\",\n    \"amtriangle\",\n  ]) as List<OscillatorType>;\n\n  const playSound = (evt: MouseEvent<HTMLDivElement>, octave: number) => {\n    let notes = [\"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\"];\n    let elem = evt.target as HTMLDivElement;\n    let rect = elem.getBoundingClientRect();\n    let middlePoint = [rect.x + rect.width / 2, rect.y + rect.height / 2];\n    let clickPos = [evt.clientX, evt.clientY];\n    let y = clickPos[0] - middlePoint[0];\n    let x = clickPos[1] - middlePoint[1];\n    let dist = Math.sqrt(x * x + y * y);\n    let maxDist = rect.height / 2;\n    let relDist = dist / maxDist;\n    let idx = Math.floor(notes.length * relDist);\n    let note = notes[idx];\n    synth?.triggerAttackRelease(`${note}${octave}`, \"0.2\");\n  };\n\n  return (\n    <div className=\"pv4\">\n      <div className=\"drums\">\n        <div className=\"firstDrum\">\n          <div className=\"innerDrum\" onClick={(evt) => playSound(evt, 3)} />\n        </div>\n        <div className=\"secondDrum\">\n          <div className=\"innerDrum\" onClick={(evt) => playSound(evt, 2)} />\n        </div>\n        <div className=\"thirdDrum\">\n          <div className=\"innerDrum\" onClick={(evt) => playSound(evt, 4)} />\n        </div>\n      </div>\n      <div className={\"pl4 pt4 flex\"}>\n        {oscillators.map((o) => (\n          <DrumType\n            key={o}\n            title={o}\n            onClick={() => setOscillator(o)}\n            active={synth?.oscillator.type === o}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport const DrumInstrument = new Instrument(\"Drums\", Drum);\n"]},"metadata":{},"sourceType":"module"}