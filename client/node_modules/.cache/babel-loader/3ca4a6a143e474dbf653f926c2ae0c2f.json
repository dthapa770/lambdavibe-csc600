{"ast":null,"code":"// 3rd party library imports\n// project imports\nimport { Visualizer } from \"../Visualizers\";\nconst SCALAR = 3;\nexport function chunk(arr, chunkSize) {\n  if (chunkSize <= 0) {\n    return [];\n  }\n\n  let result = [];\n\n  for (let i = 0, len = arr.length; i < len; i += chunkSize) result.push(arr.slice(i, i + chunkSize));\n\n  return result;\n}\nexport const SquaresVisualizer = new Visualizer(\"Squares\", (p5, analyzer) => {\n  const width = window.innerWidth;\n  const height = window.innerHeight / 2;\n  const dim = Math.min(width, height);\n  const colors = [\"lightgreen\", \"green\", \"darkgreen\", \"orange\", \"magenta\", \"red\"];\n  p5.background(0, 0, 0, 255);\n  p5.strokeWeight(dim * 0.001); //p5.stroke(255, 255, 255, 255);\n  //p5.noFill();\n\n  const values = analyzer.getValue(); //chunk values into 32 chunks (256 / 8 = 32)\n\n  let chunks = chunk(values, 8); //get average of all chunks and make it positive\n\n  let values32 = chunks.map(val => Math.abs(val.reduce((acc, val) => acc + val, 0) / val.length));\n  let squareWidth = width / values32.length;\n  let xOffset = 0;\n  const SQUARE_NUMBER_SIZE = 0.02; //console.log(values32);\n\n  p5.beginShape();\n\n  for (let i = 0; i < values32.length; i++) {\n    const amplitude = values32[i];\n    let squareAmount = Math.floor(amplitude / SQUARE_NUMBER_SIZE);\n\n    for (let y = 0; y < squareAmount; y++) {\n      var _colors$y;\n\n      p5.fill((_colors$y = colors[y]) !== null && _colors$y !== void 0 ? _colors$y : \"red\");\n      p5.square(xOffset, y * squareWidth, squareWidth);\n    }\n\n    xOffset += squareWidth;\n  }\n\n  p5.endShape();\n});","map":{"version":3,"sources":["/Users/d.t./Desktop/final/final-project-team_anon/client/src/visualizers/rupakkhatri.tsx"],"names":["Visualizer","SCALAR","chunk","arr","chunkSize","result","i","len","length","push","slice","SquaresVisualizer","p5","analyzer","width","window","innerWidth","height","innerHeight","dim","Math","min","colors","background","strokeWeight","values","getValue","chunks","values32","map","val","abs","reduce","acc","squareWidth","xOffset","SQUARE_NUMBER_SIZE","beginShape","amplitude","squareAmount","floor","y","fill","square","endShape"],"mappings":"AAAA;AAIA;AACA,SAASA,UAAT,QAA2B,gBAA3B;AAEA,MAAMC,MAAM,GAAG,CAAf;AAEA,OAAO,SAASC,KAAT,CAAeC,GAAf,EAAyBC,SAAzB,EAAqD;AAC1D,MAAIA,SAAS,IAAI,CAAjB,EAAoB;AAClB,WAAO,EAAP;AACD;;AACD,MAAIC,MAAM,GAAG,EAAb;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGJ,GAAG,CAACK,MAA1B,EAAkCF,CAAC,GAAGC,GAAtC,EAA2CD,CAAC,IAAIF,SAAhD,EACEC,MAAM,CAACI,IAAP,CAAYN,GAAG,CAACO,KAAJ,CAAUJ,CAAV,EAAaA,CAAC,GAAGF,SAAjB,CAAZ;;AACF,SAAOC,MAAP;AACD;AAED,OAAO,MAAMM,iBAAiB,GAAG,IAAIX,UAAJ,CAC/B,SAD+B,EAE/B,CAACY,EAAD,EAASC,QAAT,KAAqC;AACnC,QAAMC,KAAK,GAAGC,MAAM,CAACC,UAArB;AACA,QAAMC,MAAM,GAAGF,MAAM,CAACG,WAAP,GAAqB,CAApC;AACA,QAAMC,GAAG,GAAGC,IAAI,CAACC,GAAL,CAASP,KAAT,EAAgBG,MAAhB,CAAZ;AAEA,QAAMK,MAAM,GAAG,CACb,YADa,EAEb,OAFa,EAGb,WAHa,EAIb,QAJa,EAKb,SALa,EAMb,KANa,CAAf;AASAV,EAAAA,EAAE,CAACW,UAAH,CAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB,EAAuB,GAAvB;AAEAX,EAAAA,EAAE,CAACY,YAAH,CAAgBL,GAAG,GAAG,KAAtB,EAhBmC,CAiBnC;AACA;;AAEA,QAAMM,MAAM,GAAGZ,QAAQ,CAACa,QAAT,EAAf,CApBmC,CAqBnC;;AACA,MAAIC,MAAM,GAAGzB,KAAK,CAACuB,MAAD,EAAS,CAAT,CAAlB,CAtBmC,CAuBnC;;AACA,MAAIG,QAAQ,GAAGD,MAAM,CAACE,GAAP,CAAYC,GAAD,IACxBV,IAAI,CAACW,GAAL,CAASD,GAAG,CAACE,MAAJ,CAAW,CAACC,GAAD,EAAMH,GAAN,KAAcG,GAAG,GAAGH,GAA/B,EAAoC,CAApC,IAAyCA,GAAG,CAACtB,MAAtD,CADa,CAAf;AAGA,MAAI0B,WAAW,GAAGpB,KAAK,GAAGc,QAAQ,CAACpB,MAAnC;AAEA,MAAI2B,OAAO,GAAG,CAAd;AACA,QAAMC,kBAAkB,GAAG,IAA3B,CA9BmC,CAgCnC;;AACAxB,EAAAA,EAAE,CAACyB,UAAH;;AACA,OAAK,IAAI/B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGsB,QAAQ,CAACpB,MAA7B,EAAqCF,CAAC,EAAtC,EAA0C;AACxC,UAAMgC,SAAS,GAAGV,QAAQ,CAACtB,CAAD,CAA1B;AACA,QAAIiC,YAAY,GAAGnB,IAAI,CAACoB,KAAL,CAAWF,SAAS,GAAGF,kBAAvB,CAAnB;;AACA,SAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,YAApB,EAAkCE,CAAC,EAAnC,EAAuC;AAAA;;AACrC7B,MAAAA,EAAE,CAAC8B,IAAH,cAAQpB,MAAM,CAACmB,CAAD,CAAd,iDAAqB,KAArB;AACA7B,MAAAA,EAAE,CAAC+B,MAAH,CAAUR,OAAV,EAAmBM,CAAC,GAAGP,WAAvB,EAAoCA,WAApC;AACD;;AACDC,IAAAA,OAAO,IAAID,WAAX;AACD;;AACDtB,EAAAA,EAAE,CAACgC,QAAH;AACD,CA9C8B,CAA1B","sourcesContent":["// 3rd party library imports\nimport P5 from \"p5\";\nimport * as Tone from \"tone\";\n\n// project imports\nimport { Visualizer } from \"../Visualizers\";\n\nconst SCALAR = 3;\n\nexport function chunk(arr: any, chunkSize: number): any[][] {\n  if (chunkSize <= 0) {\n    return [];\n  }\n  let result = [];\n  for (let i = 0, len = arr.length; i < len; i += chunkSize)\n    result.push(arr.slice(i, i + chunkSize));\n  return result;\n}\n\nexport const SquaresVisualizer = new Visualizer(\n  \"Squares\",\n  (p5: P5, analyzer: Tone.Analyser) => {\n    const width = window.innerWidth;\n    const height = window.innerHeight / 2;\n    const dim = Math.min(width, height);\n\n    const colors = [\n      \"lightgreen\",\n      \"green\",\n      \"darkgreen\",\n      \"orange\",\n      \"magenta\",\n      \"red\",\n    ];\n\n    p5.background(0, 0, 0, 255);\n\n    p5.strokeWeight(dim * 0.001);\n    //p5.stroke(255, 255, 255, 255);\n    //p5.noFill();\n\n    const values = analyzer.getValue();\n    //chunk values into 32 chunks (256 / 8 = 32)\n    let chunks = chunk(values, 8);\n    //get average of all chunks and make it positive\n    let values32 = chunks.map((val) =>\n      Math.abs(val.reduce((acc, val) => acc + val, 0) / val.length)\n    );\n    let squareWidth = width / values32.length;\n\n    let xOffset = 0;\n    const SQUARE_NUMBER_SIZE = 0.02;\n\n    //console.log(values32);\n    p5.beginShape();\n    for (let i = 0; i < values32.length; i++) {\n      const amplitude = values32[i] as number;\n      let squareAmount = Math.floor(amplitude / SQUARE_NUMBER_SIZE);\n      for (let y = 0; y < squareAmount; y++) {\n        p5.fill(colors[y] ?? \"red\");\n        p5.square(xOffset, y * squareWidth, squareWidth);\n      }\n      xOffset += squareWidth;\n    }\n    p5.endShape();\n  }\n);\n"]},"metadata":{},"sourceType":"module"}