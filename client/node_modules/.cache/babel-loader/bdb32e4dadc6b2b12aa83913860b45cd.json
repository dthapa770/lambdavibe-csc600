{"ast":null,"code":"// 3rd party library imports\n// project imports\nimport { Visualizer } from \"../Visualizers\";\nconst SCALAR = 3;\nexport function chunk(arr, chunkSize) {\n  if (chunkSize <= 0) {\n    return [];\n  }\n\n  let result = [];\n\n  for (let i = 0, len = arr.length; i < len; i += chunkSize) result.push(arr.slice(i, i + chunkSize));\n\n  return result;\n}\nexport const BarVisualizer = new Visualizer(\"Bar\", (p5, analyzer) => {\n  const width = window.innerWidth;\n  const height = window.innerHeight / 2;\n  const dim = Math.min(width, height);\n  p5.background(0, 0, 0, 255);\n  p5.strokeWeight(dim * 0.01);\n  p5.stroke(255, 255, 255, 255);\n  const values = analyzer.getValue();\n  let middle = height / 2; //chunk values into 32 chunks\n\n  let chunks = chunk(values, 8); //get average of all chunks to have less bars\n\n  let values32 = chunks.map(val => val.reduce((acc, val) => acc + val, 0) / val.length);\n  let singleWidth = width / values32.length;\n  let leftDistance = 0; //console.log(values32);\n\n  p5.beginShape();\n\n  for (let i = 0; i < values32.length; i++) {\n    const amplitude = values32[i];\n    let negative = false;\n    let val = amplitude;\n\n    if (amplitude < 0) {\n      negative = true;\n      val = -amplitude;\n    }\n\n    let heightElement = val * SCALAR * middle;\n\n    if (negative) {\n      p5.fill(\"green\");\n      p5.rect(leftDistance, middle, singleWidth, -heightElement);\n    } else {\n      p5.fill(\"red\");\n      p5.rect(leftDistance, middle, singleWidth, heightElement);\n    }\n\n    leftDistance += singleWidth;\n  }\n\n  p5.endShape();\n});","map":{"version":3,"sources":["/Users/d.t./Desktop/final/final-project-team_anon/client/src/visualizers/shailendra1000.tsx"],"names":["Visualizer","SCALAR","chunk","arr","chunkSize","result","i","len","length","push","slice","BarVisualizer","p5","analyzer","width","window","innerWidth","height","innerHeight","dim","Math","min","background","strokeWeight","stroke","values","getValue","middle","chunks","values32","map","val","reduce","acc","singleWidth","leftDistance","beginShape","amplitude","negative","heightElement","fill","rect","endShape"],"mappings":"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","sourcesContent":["// 3rd party library imports\nimport P5 from \"p5\";\nimport * as Tone from \"tone\";\n\n// project imports\nimport { Visualizer } from \"../Visualizers\";\n\nconst SCALAR = 3;\n\nexport function chunk(arr: any, chunkSize: number): any[][] {\n  if (chunkSize <= 0) {\n    return [];\n  }\n  let result = [];\n  for (let i = 0, len = arr.length; i < len; i += chunkSize)\n    result.push(arr.slice(i, i + chunkSize));\n  return result;\n}\n\nexport const BarVisualizer = new Visualizer(\n  \"Bar\",\n  (p5: P5, analyzer: Tone.Analyser) => {\n    const width = window.innerWidth;\n    const height = window.innerHeight / 2;\n    const dim = Math.min(width, height);\n\n    p5.background(0, 0, 0, 255);\n\n    p5.strokeWeight(dim * 0.01);\n    p5.stroke(255, 255, 255, 255);\n\n    const values = analyzer.getValue();\n    let middle = height / 2;\n    //chunk values into 32 chunks\n    let chunks = chunk(values, 8);\n    //get average of all chunks to have less bars\n    let values32 = chunks.map(\n      (val) => val.reduce((acc, val) => acc + val, 0) / val.length\n    );\n    let singleWidth = width / values32.length;\n    let leftDistance = 0;\n\n    //console.log(values32);\n    p5.beginShape();\n    for (let i = 0; i < values32.length; i++) {\n      const amplitude = values32[i] as number;\n      let negative = false;\n      let val = amplitude;\n      if (amplitude < 0) {\n        negative = true;\n        val = -amplitude;\n      }\n      let heightElement = val * SCALAR * middle;\n      if (negative) {\n        p5.fill(\"green\");\n        p5.rect(leftDistance, middle, singleWidth, -heightElement);\n      } else {\n        p5.fill(\"red\");\n        p5.rect(leftDistance, middle, singleWidth, heightElement);\n      }\n      leftDistance += singleWidth;\n    }\n    p5.endShape();\n  }\n);\n"]},"metadata":{},"sourceType":"module"}