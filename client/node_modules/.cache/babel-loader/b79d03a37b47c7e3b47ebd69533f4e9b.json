{"ast":null,"code":"// 3rd party library imports\n// project imports\nimport { Visualizer } from \"../Visualizers\";\nexport const CircleVisualizer = new Visualizer(\"Circle\", (p5, analyzer) => {\n  const width = window.innerWidth;\n  const height = window.innerHeight / 2;\n  const dim = Math.min(width, height); //change angle mode so that circle can be displayed\n\n  p5.angleMode(p5.DEGREES); //p5.noFill();\n\n  p5.fill(\"green\");\n  p5.background(0, 0, 0, 255);\n  p5.strokeWeight(dim * 0.01);\n  p5.stroke(\"green\"); //center everything\n\n  p5.translate(p5.width / 2, p5.height / 2);\n  const values = analyzer.getValue(); //right half of circle\n\n  p5.beginShape();\n\n  for (let i = 0; i <= 180; i += 0.5) {\n    let index = p5.floor(p5.map(i, 0, 180, 0, values.length - 1));\n    let r = p5.map(Number(values[index]), -1, 1, 100, 200);\n    let x = r * p5.sin(i);\n    let y = r * p5.cos(i);\n    p5.vertex(x, y);\n  }\n\n  p5.endShape(); //left half of circle\n\n  p5.beginShape();\n\n  for (let i = 0; i <= 180; i += 0.5) {\n    let index = p5.floor(p5.map(i, 0, 180, 0, values.length - 1));\n    let r = p5.map(Number(values[index]), -1, 1, 100, 200);\n    let x = r * -p5.sin(i);\n    let y = r * p5.cos(i);\n    p5.vertex(x, y);\n  }\n\n  p5.endShape(); //right half of inner circle\n\n  p5.fill(\"lightgreen\");\n  p5.stroke(\"lightgreen\");\n  p5.beginShape();\n\n  for (let i = 0; i <= 180; i += 0.5) {\n    let index = p5.floor(p5.map(i, 0, 180, 0, values.length - 1));\n    let r = p5.map(Number(values[index]), -1, 1, 50, 100);\n    let x = r * p5.sin(i);\n    let y = r * p5.cos(i);\n    p5.vertex(x, y);\n  }\n\n  p5.endShape(); //left half of inner circle\n\n  p5.beginShape();\n\n  for (let i = 0; i <= 180; i += 0.5) {\n    let index = p5.floor(p5.map(i, 0, 180, 0, values.length - 1));\n    let r = p5.map(Number(values[index]), -1, 1, 50, 100);\n    let x = r * -p5.sin(i);\n    let y = r * p5.cos(i);\n    p5.vertex(x, y);\n  }\n\n  p5.endShape();\n});","map":{"version":3,"sources":["/Users/d.t./Desktop/final/final-project-team_anon/client/src/visualizers/dthapa770.tsx"],"names":["Visualizer","CircleVisualizer","p5","analyzer","width","window","innerWidth","height","innerHeight","dim","Math","min","angleMode","DEGREES","fill","background","strokeWeight","stroke","translate","values","getValue","beginShape","i","index","floor","map","length","r","Number","x","sin","y","cos","vertex","endShape"],"mappings":"AAAA;AAIA;AACA,SAASA,UAAT,QAA2B,gBAA3B;AAEA,OAAO,MAAMC,gBAAgB,GAAG,IAAID,UAAJ,CAC9B,QAD8B,EAE9B,CAACE,EAAD,EAASC,QAAT,KAAqC;AACnC,QAAMC,KAAK,GAAGC,MAAM,CAACC,UAArB;AACA,QAAMC,MAAM,GAAGF,MAAM,CAACG,WAAP,GAAqB,CAApC;AACA,QAAMC,GAAG,GAAGC,IAAI,CAACC,GAAL,CAASP,KAAT,EAAgBG,MAAhB,CAAZ,CAHmC,CAInC;;AACAL,EAAAA,EAAE,CAACU,SAAH,CAAaV,EAAE,CAACW,OAAhB,EALmC,CAMnC;;AACAX,EAAAA,EAAE,CAACY,IAAH,CAAQ,OAAR;AAEAZ,EAAAA,EAAE,CAACa,UAAH,CAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB,EAAuB,GAAvB;AAEAb,EAAAA,EAAE,CAACc,YAAH,CAAgBP,GAAG,GAAG,IAAtB;AACAP,EAAAA,EAAE,CAACe,MAAH,CAAU,OAAV,EAZmC,CAcnC;;AACAf,EAAAA,EAAE,CAACgB,SAAH,CAAahB,EAAE,CAACE,KAAH,GAAW,CAAxB,EAA2BF,EAAE,CAACK,MAAH,GAAY,CAAvC;AACA,QAAMY,MAAM,GAAGhB,QAAQ,CAACiB,QAAT,EAAf,CAhBmC,CAiBnC;;AACAlB,EAAAA,EAAE,CAACmB,UAAH;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,GAArB,EAA0BA,CAAC,IAAI,GAA/B,EAAoC;AAClC,QAAIC,KAAK,GAAGrB,EAAE,CAACsB,KAAH,CAAStB,EAAE,CAACuB,GAAH,CAAOH,CAAP,EAAU,CAAV,EAAa,GAAb,EAAkB,CAAlB,EAAqBH,MAAM,CAACO,MAAP,GAAgB,CAArC,CAAT,CAAZ;AACA,QAAIC,CAAC,GAAGzB,EAAE,CAACuB,GAAH,CAAOG,MAAM,CAACT,MAAM,CAACI,KAAD,CAAP,CAAb,EAA8B,CAAC,CAA/B,EAAkC,CAAlC,EAAqC,GAArC,EAA0C,GAA1C,CAAR;AACA,QAAIM,CAAC,GAAGF,CAAC,GAAGzB,EAAE,CAAC4B,GAAH,CAAOR,CAAP,CAAZ;AACA,QAAIS,CAAC,GAAGJ,CAAC,GAAGzB,EAAE,CAAC8B,GAAH,CAAOV,CAAP,CAAZ;AACApB,IAAAA,EAAE,CAAC+B,MAAH,CAAUJ,CAAV,EAAaE,CAAb;AACD;;AACD7B,EAAAA,EAAE,CAACgC,QAAH,GA1BmC,CA2BnC;;AACAhC,EAAAA,EAAE,CAACmB,UAAH;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,GAArB,EAA0BA,CAAC,IAAI,GAA/B,EAAoC;AAClC,QAAIC,KAAK,GAAGrB,EAAE,CAACsB,KAAH,CAAStB,EAAE,CAACuB,GAAH,CAAOH,CAAP,EAAU,CAAV,EAAa,GAAb,EAAkB,CAAlB,EAAqBH,MAAM,CAACO,MAAP,GAAgB,CAArC,CAAT,CAAZ;AACA,QAAIC,CAAC,GAAGzB,EAAE,CAACuB,GAAH,CAAOG,MAAM,CAACT,MAAM,CAACI,KAAD,CAAP,CAAb,EAA8B,CAAC,CAA/B,EAAkC,CAAlC,EAAqC,GAArC,EAA0C,GAA1C,CAAR;AACA,QAAIM,CAAC,GAAGF,CAAC,GAAG,CAACzB,EAAE,CAAC4B,GAAH,CAAOR,CAAP,CAAb;AACA,QAAIS,CAAC,GAAGJ,CAAC,GAAGzB,EAAE,CAAC8B,GAAH,CAAOV,CAAP,CAAZ;AACApB,IAAAA,EAAE,CAAC+B,MAAH,CAAUJ,CAAV,EAAaE,CAAb;AACD;;AACD7B,EAAAA,EAAE,CAACgC,QAAH,GApCmC,CAqCnC;;AACAhC,EAAAA,EAAE,CAACY,IAAH,CAAQ,YAAR;AACAZ,EAAAA,EAAE,CAACe,MAAH,CAAU,YAAV;AACAf,EAAAA,EAAE,CAACmB,UAAH;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,GAArB,EAA0BA,CAAC,IAAI,GAA/B,EAAoC;AAClC,QAAIC,KAAK,GAAGrB,EAAE,CAACsB,KAAH,CAAStB,EAAE,CAACuB,GAAH,CAAOH,CAAP,EAAU,CAAV,EAAa,GAAb,EAAkB,CAAlB,EAAqBH,MAAM,CAACO,MAAP,GAAgB,CAArC,CAAT,CAAZ;AACA,QAAIC,CAAC,GAAGzB,EAAE,CAACuB,GAAH,CAAOG,MAAM,CAACT,MAAM,CAACI,KAAD,CAAP,CAAb,EAA8B,CAAC,CAA/B,EAAkC,CAAlC,EAAqC,EAArC,EAAyC,GAAzC,CAAR;AACA,QAAIM,CAAC,GAAGF,CAAC,GAAGzB,EAAE,CAAC4B,GAAH,CAAOR,CAAP,CAAZ;AACA,QAAIS,CAAC,GAAGJ,CAAC,GAAGzB,EAAE,CAAC8B,GAAH,CAAOV,CAAP,CAAZ;AACApB,IAAAA,EAAE,CAAC+B,MAAH,CAAUJ,CAAV,EAAaE,CAAb;AACD;;AACD7B,EAAAA,EAAE,CAACgC,QAAH,GAhDmC,CAiDnC;;AACAhC,EAAAA,EAAE,CAACmB,UAAH;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,GAArB,EAA0BA,CAAC,IAAI,GAA/B,EAAoC;AAClC,QAAIC,KAAK,GAAGrB,EAAE,CAACsB,KAAH,CAAStB,EAAE,CAACuB,GAAH,CAAOH,CAAP,EAAU,CAAV,EAAa,GAAb,EAAkB,CAAlB,EAAqBH,MAAM,CAACO,MAAP,GAAgB,CAArC,CAAT,CAAZ;AACA,QAAIC,CAAC,GAAGzB,EAAE,CAACuB,GAAH,CAAOG,MAAM,CAACT,MAAM,CAACI,KAAD,CAAP,CAAb,EAA8B,CAAC,CAA/B,EAAkC,CAAlC,EAAqC,EAArC,EAAyC,GAAzC,CAAR;AACA,QAAIM,CAAC,GAAGF,CAAC,GAAG,CAACzB,EAAE,CAAC4B,GAAH,CAAOR,CAAP,CAAb;AACA,QAAIS,CAAC,GAAGJ,CAAC,GAAGzB,EAAE,CAAC8B,GAAH,CAAOV,CAAP,CAAZ;AACApB,IAAAA,EAAE,CAAC+B,MAAH,CAAUJ,CAAV,EAAaE,CAAb;AACD;;AACD7B,EAAAA,EAAE,CAACgC,QAAH;AACD,CA7D6B,CAAzB","sourcesContent":["// 3rd party library imports\nimport P5 from \"p5\";\nimport * as Tone from \"tone\";\n\n// project imports\nimport { Visualizer } from \"../Visualizers\";\n\nexport const CircleVisualizer = new Visualizer(\n  \"Circle\",\n  (p5: P5, analyzer: Tone.Analyser) => {\n    const width = window.innerWidth;\n    const height = window.innerHeight / 2;\n    const dim = Math.min(width, height);\n    //change angle mode so that circle can be displayed\n    p5.angleMode(p5.DEGREES);\n    //p5.noFill();\n    p5.fill(\"green\");\n\n    p5.background(0, 0, 0, 255);\n\n    p5.strokeWeight(dim * 0.01);\n    p5.stroke(\"green\");\n\n    //center everything\n    p5.translate(p5.width / 2, p5.height / 2);\n    const values = analyzer.getValue();\n    //right half of circle\n    p5.beginShape();\n    for (let i = 0; i <= 180; i += 0.5) {\n      let index = p5.floor(p5.map(i, 0, 180, 0, values.length - 1));\n      let r = p5.map(Number(values[index]), -1, 1, 100, 200);\n      let x = r * p5.sin(i);\n      let y = r * p5.cos(i);\n      p5.vertex(x, y);\n    }\n    p5.endShape();\n    //left half of circle\n    p5.beginShape();\n    for (let i = 0; i <= 180; i += 0.5) {\n      let index = p5.floor(p5.map(i, 0, 180, 0, values.length - 1));\n      let r = p5.map(Number(values[index]), -1, 1, 100, 200);\n      let x = r * -p5.sin(i);\n      let y = r * p5.cos(i);\n      p5.vertex(x, y);\n    }\n    p5.endShape();\n    //right half of inner circle\n    p5.fill(\"lightgreen\");\n    p5.stroke(\"lightgreen\");\n    p5.beginShape();\n    for (let i = 0; i <= 180; i += 0.5) {\n      let index = p5.floor(p5.map(i, 0, 180, 0, values.length - 1));\n      let r = p5.map(Number(values[index]), -1, 1, 50, 100);\n      let x = r * p5.sin(i);\n      let y = r * p5.cos(i);\n      p5.vertex(x, y);\n    }\n    p5.endShape();\n    //left half of inner circle\n    p5.beginShape();\n    for (let i = 0; i <= 180; i += 0.5) {\n      let index = p5.floor(p5.map(i, 0, 180, 0, values.length - 1));\n      let r = p5.map(Number(values[index]), -1, 1, 50, 100);\n      let x = r * -p5.sin(i);\n      let y = r * p5.cos(i);\n      p5.vertex(x, y);\n    }\n    p5.endShape();\n  }\n);\n"]},"metadata":{},"sourceType":"module"}